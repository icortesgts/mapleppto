@model MaplePPTO.ViewModels.ParametroViewModel


@*<h1 class="m-0">Assumptions List</h1>*@
<div class="card mt-2">
    @*<div class="card-header">
            <h3 class="card-title">DataTable with default features</h3>
        </div>*@
    <!-- /.card-header -->
    <div class="card-body">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "mainForm" }))
        {
        <div class="row">

            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-6">
                        <label>Budget</label>
                        @Html.DropDownListFor(model => model.PresupuestoId, Model.selectListBudgets, new { @class = "form-control", @id = "ddlBudgets" })
                    </div>
                    <div class="col-md-6">
                        <label>Escenarie</label>
                        @Html.DropDownListFor(model => model.EscenarioId, Model.selectListEscenaries, new { @class = "form-control", @id = "ddlEscenaries" })
                    </div>
                </div>
                <div class="row mt-5">
                    <div class="col-12">
                        <button type="button" id="btnCalculate" class="btn btn-outline-success">CALCULATE BASE</button>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="row">
                    <div class="col-12">
                        <label>Clients</label>
                        <div class="row" id="checkClients">
                            @foreach (var item in Model.listClientes)
                            {
                                <div class="col-12 col-sm-4">
                                    <div class="form-check">
                                        <label>
                                            <input type="checkbox" value="@item.Id" class="form-check-input"><span style="font-size:13px">@item.Nombre</span>
                                        </label>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>




            @*<div class="col-12  col-md-2">
            <button type="button" class="btn btn-outline-success">FILTER</button>
        </div>*@
        </div>
        }
        <p>


        </p>
        <hr />
        @if (Model.ParametroList != null && Model.ParametroList.Count() > 0)
        {
            <div class="table-responsive">
                <table id="example2" class="table table-sm table-bordered table-hover" style="font-size:13px">
                    <thead>
                        <tr>
                            <th>
                                CONCEPT
                            </th>

                            @foreach (var item in Model.listClientes)
                            {
                                <th style="min-width:80px; @(!Model.selectedClients.Contains(item.Id) ? "display:none;":"")" class="text-nowrap">
                                    @item.Nombre <span class="ps-3">%</span>
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var concepto in Model.listConceptParam)
                        {
                            <tr>
                                <th>
                                    @concepto
                                </th>
                                @foreach (var cli in Model.listClientes)
                                {

                            <td style="@(!Model.selectedClients.Contains(cli.Id) ? "display:none;":"")">
                                @{
                                    var data = Model.ParametroList.Where(x => x.Key.Equals(cli.Nombre))?.FirstOrDefault()?.ToList();
                                    var obj = data?.Where(x => x.parametroNombre.Equals(concepto)).FirstOrDefault();
                                }
                                <input type="number" onchange="newData(event)" style="width:95%" value="@Math.Round((obj?.valornum ?? 0), 1)" min="0" step=".1" />
                                <input type="hidden" class="parametroId" value="@(obj?.parametroId)" />
                                <input type="hidden" class="cliente_id" value="@(cli?.Id)" />
                                <input type="hidden" class="concept" value="@concepto" />
                            </td>
                                }

                                @*<td>
                                    @Html.DisplayFor(modelItem => item.valorstr)
                                </td>
                                <td>
                                    <span>@Math.Round(item.valornum, 2)</span>
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.valordate)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Cliente)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Fase)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Escenario)
                                </td>*@
                                @*<td>
                                    <a class="" title="Edit" href="@Url.Action("Edit","Parametro",new { id=item.parametroId })"><i class="fas fa-edit"></i> </a> |
                                    <a class="deleteFromList" title="Delete" href="@Url.Action("Delete","Parametro",new { id=item.parametroId })"> <i class="fas fa-solid fa-trash"></i> </a>
                                </td>*@
                            </tr>
                        }




                    </tbody>

                </table>
            </div>} else {
                          <div class="card">
                              <div class="card-bordy">
                                  <h2 class="text-danger">NOT DATA FOUND!</h2>
                              </div>
                          </div>                  
                                            
                               }



    </div>
    <!-- /.card-body -->
</div>
<a href="@Url.Action("BulkCreateOrUpdate", "Parametro")" class="float" id="saveChanges">

    <span style="font-weight:bold;font-size:12px">SAVE</span> <i class="fa fa-pen my-float"></i>

</a>
<!-- /.card -->

@section scripts {

    <!-- DataTables  & Plugins -->
    <script src="~/Content/template/plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="~/Content/template/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/Content/template/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/Content/template/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <script src="~/Content/template/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/Content/template/plugins/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
    <script src="~/Content/template/plugins/jszip/jszip.min.js"></script>
    <script src="~/Content/template/plugins/pdfmake/pdfmake.min.js"></script>
    <script src="~/Content/template/plugins/pdfmake/vfs_fonts.js"></script>
    <script src="~/Content/template/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
    <script src="~/Content/template/plugins/datatables-buttons/js/buttons.print.min.js"></script>
    <script src="~/Content/template/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>

    <script>


        const clients = @Html.Raw(Json.Encode(Model.selectedClients));
        const urlCalculateBase = '@Url.Action("CalculateBase", "Compartido")';

        let listToSave = [];
        $(function () {

            const cl = document.querySelectorAll("#checkClients input")
            for (let element of cl) {
                element.checked = clients.includes(parseInt(element.value));
            }
            $('#ddlBudgets').on('change', function () {

                const form = document.getElementById('mainForm');
                generateFieldSelectedClients(form);
                form.submit();
            });

            $('#ddlEscenaries').on('change', function () {
                const form = document.getElementById('mainForm');
                generateFieldSelectedClients( form);
                form.submit();
            });

            $('#checkClients input.form-check-input').on('change', function (event) {
                const element = event.target;
                const client = element.labels[0].innerText;

                const tableHeader = document.querySelectorAll('#example2 thead tr');
                const tableBody = document.querySelectorAll('#example2 tbody tr');
                let index = 0;

                for (let tr of tableHeader) {
                    for (let td of tr.cells) {
                        if (td.innerText.includes(client)) {
                            if(element.checked)
                                td.style.display = "table-cell";
                            else
                                td.style.display = "none";
                            break;
                        }
                        index++;
                    }
                }

                for (let tr of tableBody) {

                    if (element.checked)
                        tr.cells[index].style.display = "table-cell";
                    else
                        tr.cells[index].style.display = "none";
                }

            });

            $('#saveChanges').on('click', function () {

                event.preventDefault();
                let url = event.currentTarget.href;


                if (listToSave.length > 0) {


                    swal.fire({
                        html: '<i class="fas fa-3x fa-sync-alt fa-spin"></i> <div class="text-bold pt-2">Loading...</div>',
                    });

                    fetch(url, {
                        method: 'POST',
                        body: JSON.stringify({ parametros: listToSave}),
                        headers: {
                            'Content-type': 'application/json; charset=UTF-8' // Indicates the content
                        }
                    })
                        .then(res => res.json())
                        .then(response => {
                            if (response.errorCode == 0) {
                                Swal.fire(
                                    'Success!',
                                    'Data Saved successfully.',
                                    /*'success'*/
                                );
                                listToSave = [];
                                //setTimeout(() => location.reload(true), 2000);
                            } else {
                                Swal.fire(
                                    response.message,
                                    '',
                                    'error');
                            }
                        })
                        .catch(error => {
                            Swal.fire(
                                error.message,
                                '',
                                'error')
                        });



                } else {
                    Swal.fire(
                        "Not changes Detected.",
                        '',
                        'error')
                }

            });
            //$("#example2").DataTable({
            //    "responsive": true,
            //    "lengthChange": false,
            //    "autoWidth": false,
            //    "buttons": ["copy", "csv", "excel", "pdf", "print", "colvis"]
            //}).buttons().container().appendTo('#example2_wrapper .col-md-6:eq(0)');

            $('.deleteFromList').on('click', function (event) {
                event.preventDefault();
                let url = event.currentTarget.href;

                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {


                        swal.fire({
                            html: '<i class="fas fa-3x fa-sync-alt fa-spin"></i> <div class="text-bold pt-2">Loading...</div>',
                        });

                        fetch(url, {
                            method: 'GET',
                            headers: {
                                'Content-type': 'application/json; charset=UTF-8' // Indicates the content
                            }
                        })
                            .then(res => res.json())
                            .then(response => {
                                if (response.code == 0) {
                                    Swal.fire(
                                        'Deleted!',
                                        'Your file has been deleted.',
                                        'success'
                                    );
                                    setTimeout(() => location.reload(true), 2000);
                                } else {
                                    Swal.fire(
                                        response.message,
                                        '',
                                        'error');
                                }
                            })
                            .catch(error => {
                                Swal.fire(
                                    error.message,
                                    '',
                                    'error')
                            });



                    }
                })

            });

        });


        $('#btnCalculate').on('click', (ev) => {

            
            $('button').prop('disabled', true);

            const loading = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...`;
            const valueText = `CALCULATE BASE`;
            $('#btnCalculate').html(loading);

            if (!confirm("Are you sure?")) {
                $('button').prop('disabled', false);
                $('#btnCalculate').html(valueText);
                return false;
            }

            const presupuesto = document.getElementById("ddlBudgets");
            const escenario = document.getElementById("ddlEscenaries");
            const PresupuestoId = presupuesto.value;
            const EscenarioId = escenario.value;

            fetch(urlCalculateBase, {
                method: 'POST',
                body: JSON.stringify({ PresupuestoId, EscenarioId }),
                headers: {
                    'Content-type': 'application/json; charset=UTF-8' // Indicates the content
                }
            }).then(res => res.json())
                .then(response => {
                    $('#btnCalculate').html(valueText);
                    $('button').prop('disabled', false);
                    if (response.errorCode == 0) {
                        Swal.fire(
                            'Success!',
                            'Data Saved successfully.',
                            /*'success'*/
                        );
                        listToSave = [];
                        //setTimeout(() => location.reload(true), 2000);
                    } else {
                        Swal.fire(
                            response.message,
                            '',
                            'error');
                    }
                })
                .catch(error => {
                    $('#btnCalculate').html(valueText);
                    $('button').prop('disabled', false);
                    Swal.fire(
                        error.message,
                        '',
                        'error')
                });
        });

        function generateFieldSelectedClients(form) {
            const list = document.querySelectorAll("#checkClients input");
             for(let item of list) {
                if (item.checked)
                    form.appendChild(createElementInput("hidden", `selectedClients[]`, item.value));
            };

        }

        function createElementInput(type, name, value) {
            let newElement = document.createElement("input");
            newElement.type = type;
            newElement.name = name;
            newElement.value = value;
            return newElement;
        }
        function newData(event) {
            const elementValue = event.target;
            const elementParam = elementValue.nextElementSibling;
            const elementClient = elementParam.nextElementSibling;
            const elementConcept = elementClient.nextElementSibling;
            const ddlEscenaries = document.getElementById("ddlEscenaries");
            const ddlBudgets = document.getElementById("ddlBudgets");



            const obj = {
                id: elementParam.value,
                Nombre: elementConcept.value,
                ValorNum: (parseFloat(elementValue.value)/100),
                id_cliente: elementClient.value,
                id_ppto: ddlEscenaries.value,
                id_escenario: ddlBudgets.value
            }

            let index = listToSave.findIndex(x => x.id_cliente == obj.id_cliente && x.Nombre == obj.Nombre);

            if (index >= 0) {
                listToSave[index].ValorNum = obj.ValorNum;
            } else {
                listToSave.push(obj);
            }

        }


    </script>

}