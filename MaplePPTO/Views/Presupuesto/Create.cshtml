@model MaplePPTO.ViewModels.PptoViewModel
<div class="card card-primary card-outline mt-2" id="app">
    <div class="card-header">
        <h3 class="card-title">
            <i class="nav-icon fas fa-sticky-note"></i>
            Budgets
        </h3>
        <span class="mx-5"></span>
        @*<div class="d-inline float-end">
                @Html.ActionLink("Back to List", "Index")
            </div>*@
    </div>
    <div class="card-body">
        <ul class="nav nav-tabs" id="custom-content-below-tab" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="custom-content-below-home-tab" data-toggle="pill" href="#custom-content-below-home" role="tab" aria-controls="custom-content-below-home" aria-selected="true">CREATE</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="custom-content-below-profile-tab" data-toggle="pill" href="#custom-content-below-profile" role="tab" aria-controls="custom-content-below-profile" aria-selected="false">RELATE ESCENARY</a>
            </li>
        </ul>
        <div class="tab-content" id="custom-content-below-tabContent">
            <div class="tab-pane fade active show" id="custom-content-below-home" role="tabpanel" aria-labelledby="custom-content-below-home-tab">
                <form id="frmPpto">
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            <label class = "control-label col-md-2">Name</label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">Initial Year</label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.AInicial, new { htmlAttributes = new { @class = "form-control", required = "required", min = "2020" } })
                                @Html.ValidationMessageFor(model => model.AInicial, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">End Year</label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.AFinal, new { htmlAttributes = new { @class = "form-control", required = "required", min = "2020" } })
                                @Html.ValidationMessageFor(model => model.AFinal, "", new { @class = "text-danger" })
                            </div>
                        </div>



                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input id="btnCreatePpto" type="submit" value="CREATE" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                </form>

            </div>
            <div class="tab-pane fade" id="custom-content-below-profile" role="tabpanel" aria-labelledby="custom-content-below-profile-tab">
                <form id="frmPptoEsc">
                    <div class="form-group">
                        <label class="control-label col-md-2"> Budget</label>
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.id, Model.Ppto.Select(x => new SelectListItem
                       {
                           Value = x.id.ToString(),
                           Text = x.Nombre
                       }), new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-2"> Escenery</label>
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.EscenarioId, Model.Escenario.Select(x => new SelectListItem
                       {
                           Value = x.id.ToString(),
                           Text = x.Nombre
                       }), new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input id="btnSavePptoEsc" type="submit" value="SAVE" class="btn btn-default" />
                        </div>
                    </div>
                </form>
            </div>

        </div>


    </div>
    <div class="card-footer">
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>
@section scripts {

    <script>

    const urlCreatePpto = '@Url.Action("CreatePpto", "Presupuesto")';
        const urlSavePptoEscenario = '@Url.Action("SavePptoEscenario", "Presupuesto")';
        window.onload = (event) => {

            const frmPpto = document.getElementById("frmPpto");
            frmPpto.addEventListener("submit", createPpto, false);

            const frmPptoEsc = document.getElementById("frmPptoEsc");
            frmPptoEsc.addEventListener("submit", savePptoEsc, false);
        };


        const createPpto = (event) => {
            event.preventDefault();

            const formData = new FormData(event.target);
            const PptoVM = Array.from(formData.entries()).reduce((memo, [key, value]) => ({
                ...memo,
                [key]: value,
            }), {});

            const { __RequestVerificationToken } = PptoVM;

            fetch(urlCreatePpto, {
                    method: 'POST',
                body: JSON.stringify({ PptoVM }),
                headers: {
                    'Content-Type': 'application/json',
                }
                }).then(response => {
                    if (response.ok) { return response.json() }
                    throw new Error(response.statusText);  // throw an error if there's something wrong with the response
                }).then(data => {
                    if (data.errorCode == 0) {
                        alert("Create Success!");
                        location.reload();
                    } else if (data.errorCode == 1) {
                        alert(data.errorMessage);
                    } else {
                        alert("An error ocurred!");
                    }

                }).catch(error => {
                    alert(error);
                });
        }

        const savePptoEsc = (event) => {
            event.preventDefault();

            const formData = new FormData(event.target);
            const PptoVM = Array.from(formData.entries()).reduce((memo, [key, value]) => ({
                ...memo,
                [key]: value,
            }), {});

            const { __RequestVerificationToken } = PptoVM;

            fetch(urlSavePptoEscenario, {
                method: 'POST',
                body: JSON.stringify({ PptoVM }),
                headers: {
                    'Content-Type': 'application/json',
                }
            }).then(response => {
                if (response.ok) { return response.json() }
                throw new Error(response.statusText);  // throw an error if there's something wrong with the response
            }).then(data => {
                if (data.errorCode == 0) {
                    alert("Create Success!");
                } else if (data.errorCode == 1) {
                    alert(data.errorMessage);
                }
                else {
                    alert("An error ocurred!");
                }

            }).catch(error => {
                alert(error);
            });
        }

    </script>

}
